#!/bin/sh

# Log Keepalived state change
logger "Keepalived state changed: TYPE=$TYPE, NAME=$NAME, ACTION=$ACTION"

# Only handle GROUP events to avoid duplicate triggers
if [ "$TYPE" != "GROUP" ]; then
	exit 0
fi

# Restart odhcpd if necessary
restart_odhcpd_if_needed() {
	if [ "$1" = true ]; then
		logger "Restarting odhcpd service"
		/etc/init.d/odhcpd restart
	fi
}

# Restart natmap if necessary
restart_natmap_if_needed() {
	if [ "$1" = true ]; then
		logger "Restarting natmap service"
		/etc/init.d/natmap restart
	fi
}

# Restart cloudflared if necessary
restart_cloudflared_if_needed() {
	if [ "$1" = true ]; then
		logger "Restarting cloudflared service"
		/etc/init.d/cloudflared restart
	fi
}

# Sync leases on backup router
sync_leases_if_needed() {
	if [ "$1" = "BACKUP" ]; then
		logger "Executing sync_leases.sh due to BACKUP state"
		/usr/share/keepalived/scripts/sync_leases.sh &
	fi
}

# Check and update UCI settings
check_and_update() {
	local config_key=$1
	local target_value=$2
	local current_value
	current_value=$(uci get "$config_key" 2>/dev/null)

	if [ "$current_value" = "$target_value" ]; then
		logger "$config_key is already set to $target_value, skipping"
		return 1
	else
		logger "Updating $config_key from $current_value to $target_value"
		uci set "$config_key=$target_value"
		uci commit "${config_key%%.*}"
		return 0
	fi
}

# Check installed services
natmap_installed=true
if ! [ -x "$(command -v natmap)" ]; then
	logger "natmap is not installed, skipping natmap control"
	natmap_installed=false
fi

cloudflared_installed=true
if ! [ -x "$(command -v cloudflared)" ]; then
	logger "cloudflared is not installed, skipping cloudflared control"
	cloudflared_installed=false
fi

# Process Keepalived state directly from the ACTION
restart_odhcpd=false
restart_natmap=false
restart_cloudflared=false

if [ "$ACTION" = "NOTIFY_MASTER" ]; then
	logger "Keepalived state is MASTER, enabling services"

	# Enable natmap
	if [ "$natmap_installed" = true ]; then
		check_and_update "natmap.@global[0].enable" "1" && restart_natmap=true
	fi

	# Enable cloudflared
	if [ "$cloudflared_installed" = true ]; then
		check_and_update "cloudflared.config.enabled" "1" && restart_cloudflared=true
	fi

	# Enable DHCPv4
	check_and_update "dhcp.lan.ignore" "0"

	# Enable DHCPv6
	check_and_update "dhcp.lan.dhcpv6" "server" && restart_odhcpd=true
	check_and_update "dhcp.lan.ra" "server" && restart_odhcpd=true
	check_and_update "dhcp.lan.ndp" "relay" && restart_odhcpd=true

	# Skip sync_leases.sh
	logger "Skipping sync_leases.sh due to MASTER state"

elif [ "$ACTION" = "NOTIFY_BACKUP" ]; then
	logger "Keepalived state is BACKUP, disabling services"

	# Disable natmap
	if [ "$natmap_installed" = true ]; then
		check_and_update "natmap.@global[0].enable" "0" && restart_natmap=true
	fi

	# Disable cloudflared
	if [ "$cloudflared_installed" = true ]; then
		check_and_update "cloudflared.config.enabled" "0" && restart_cloudflared=true
	fi

	# Disable DHCPv4
	check_and_update "dhcp.lan.ignore" "1"

	# Disable DHCPv6
	check_and_update "dhcp.lan.dhcpv6" "disabled" && restart_odhcpd=true
	check_and_update "dhcp.lan.ra" "disabled" && restart_odhcpd=true
	check_and_update "dhcp.lan.ndp" "disabled" && restart_odhcpd=true

fi

# Restart services if needed
restart_odhcpd_if_needed "$restart_odhcpd"
restart_natmap_if_needed "$restart_natmap"
restart_cloudflared_if_needed "$restart_cloudflared"
