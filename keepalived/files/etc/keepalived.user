#!/bin/sh

# Log Keepalived state change
logger "Keepalived state changed: TYPE=$TYPE, NAME=$NAME, ACTION=$ACTION"

# Check if keepalived is shutting down
if [ "$ACTION" = "shutdown" ]; then
	# Disable natmap
	if [ "$natmap_installed" = true ]; then
		logger "*** Keepalived is shutting down, stopping natmap ***"
		check_and_update "natmap.global.enable" "0"
		stop_natmap_if_needed "$ACTION"
	fi

	logger "*** Keepalived is shutting down, removing state files ***"
	rm -f /tmp/keepalived_initial_start
	exit 0 # Exit script after shutdown
fi

# Check if keepalived is starting up
if [ "$ACTION" = "startup" ]; then
	logger "Keepalived is starting, marking initial start"
	touch /tmp/keepalived_initial_start
	exit 0 # Exit startup script immediately
fi

# Only handle GROUP events to avoid duplicate triggers
if [ "$TYPE" != "GROUP" ]; then
	exit 0
fi

if [ "$TYPE" = "GROUP" ]; then
	case "$ACTION" in
		NOTIFY_MASTER)
			echo "MASTER" > /tmp/keepalived_state
			;;
		NOTIFY_BACKUP)
			echo "BACKUP" > /tmp/keepalived_state
			;;
	esac
fi

# **Detected initial 'NOTIFY_BACKUP' after Keepalived start, delay execution**
if [ -f /tmp/keepalived_initial_start ] && [ "$ACTION" = "NOTIFY_BACKUP" ]; then
	logger "*** Detected initial NOTIFY_BACKUP after Keepalived start, delaying execution ***"
	sleep 6

	# 读取延迟后的最终状态
	CURRENT_STATE=$(cat /tmp/keepalived_state)
	rm -f /tmp/keepalived_initial_start

	if [ "$CURRENT_STATE" = "BACKUP" ]; then
		logger "*** After delay, Keepalived is still in BACKUP state, executing NOTIFY_BACKUP logic ***"
	else
		logger "*** After delay, Keepalived is no longer in BACKUP state, skipping NOTIFY_BACKUP execution ***"
		exit 0
	fi
fi

# Restart odhcpd if necessary
restart_odhcpd_if_needed() {
	logger "Restarting odhcpd service"
	/etc/init.d/odhcpd restart 2>/dev/null || logger "Error restarting odhcpd"
}

# Start natmap if necessary
start_natmap_if_needed() {
	# 检查 natmap 服务状态
	if service natmap status | grep -q "running"; then
		logger "natmap service is already running, skipping start"
	else
		logger "Starting natmap service"
		/etc/init.d/natmap start 2>/dev/null || logger "Error starting natmap"
	fi
}

# Stop natmap if necessary
stop_natmap_if_needed() {
	logger "Stopping natmap service"
	/etc/init.d/natmap stop 2>/dev/null || logger "Error stopping natmap"
}

# Sync leases on backup router
sync_leases_if_needed() {
	if [ "$1" = "NOTIFY_BACKUP" ]; then
		logger "Executing sync_leases.sh for DHCP lease sync in BACKUP state"
		/usr/share/keepalived/scripts/sync_leases.sh &
	fi
}

# Schedule sync  dhcp.leases
schedule_sync_leases() {
	if [ "$1" = "NOTIFY_BACKUP" ]; then
		logger "Scheduling periodic DHCP lease sync"
		(crontab -l 2>/dev/null | grep -v 'sync_leases.sh'; echo "*/2 * * * * /usr/share/keepalived/scripts/sync_leases.sh") | crontab - 2>/dev/null || logger "Error setting cron job"
	elif [ "$1" = "NOTIFY_MASTER" ]; then
		logger "Removing DHCP lease sync cron job"
		(crontab -l 2>/dev/null | grep -v 'sync_leases.sh') | crontab - 2>/dev/null || logger "Error removing cron job"
	fi
}

# Check and update UCI settings
check_and_update() {
	local config_key=$1
	local target_value=$2
	local current_value
	current_value=$(uci get "$config_key" 2>/dev/null)

	if [ "$current_value" != "$target_value" ]; then
		logger "Updating $config_key from $current_value to $target_value"
		uci set "$config_key"="$target_value"
		uci commit "${config_key%%.*}" 2>/dev/null || logger "Error committing config"
    	else
		logger "$config_key is already set to $target_value, skipping"
	fi
}

# Check installed services
natmap_installed=true
if ! command -v natmap >/dev/null 2>&1; then
	logger "natmap is not installed, skipping natmap control"
	natmap_installed=false
fi

# Process Keepalived state directly from the ACTION
if [ "$ACTION" = "NOTIFY_MASTER" ]; then
	logger "Keepalived state is MASTER, enabling services"

	# Enable DHCPv4
	check_and_update "dhcp.lan.ignore" "0"

	# Enable DHCPv6 settings in batch
	uci batch <<EOF
	set dhcp.lan.dhcpv6=server
	set dhcp.lan.ra=server
	set dhcp.lan.ndp=relay
	add_list dhcp.lan.ra_flags=managed-config
	add_list dhcp.lan.ra_flags=other-config
	# add_list dhcp.lan.ra_flags=home-agent
	commit dhcp 2>/dev/null || logger "Error committing dhcp config"
EOF
	restart_odhcpd_if_needed

	# Skip sync_leases.sh
	logger "Skipping sync_leases.sh due to MASTER state"

	# Delete schedule
	schedule_sync_leases "$ACTION"

	# Enable natmap
	if [ "$natmap_installed" = true ]; then
		check_and_update "natmap.global.enable" "1"
		start_natmap_if_needed "$ACTION"
	fi

elif [ "$ACTION" = "NOTIFY_BACKUP" ]; then
	logger "Keepalived state is BACKUP, disabling services"

	# Disable natmap
	if [ "$natmap_installed" = true ]; then
		check_and_update "natmap.global.enable" "0"
		stop_natmap_if_needed "$ACTION"
	fi

	# Disable DHCPv4
	check_and_update "dhcp.lan.ignore" "1"

	# Disable DHCPv6 settings in batch
	uci batch <<EOF
	set dhcp.lan.dhcpv6=disabled
	set dhcp.lan.ra=disabled
	set dhcp.lan.ndp=disabled
	delete dhcp.lan.ra_flags
	commit dhcp 2>/dev/null || logger "Error committing dhcp config"
EOF
	restart_odhcpd_if_needed

	# Sync leases on backup router
	sync_leases_if_needed "$ACTION"

	# Add schedule
	schedule_sync_leases "$ACTION"
fi
