#!/bin/sh

# Log Keepalived state change
logger "Keepalived state changed: TYPE=$TYPE, NAME=$NAME, ACTION=$ACTION"

# Check if natmap installed
natmap_installed=true
if ! command -v natmap >/dev/null 2>&1; then
	logger "natmap is not installed, skipping natmap control"
	natmap_installed=false
fi

# Start natmap if necessary
start_natmap_if_needed() {
	# Check natmap status
	if service natmap status | grep -q "running"; then
		logger "natmap service is already running, skipping start"
	else
		logger "***** Starting natmap service *****"
		/etc/init.d/natmap start 2>/dev/null || logger "Error starting natmap"
	fi
}

# Stop natmap if necessary
stop_natmap_if_needed() {
	logger "***** Stopping natmap service *****"
	/etc/init.d/natmap stop 2>/dev/null || logger "Error stopping natmap"
}

# Check if cloudflared installed
cloudflared_installed=true
if ! command -v cloudflared >/dev/null 2>&1; then
	logger "cloudflared is not installed, skipping cloudflared control"
	cloudflared_installed=false
fi

# Start cloudflared if necessary
start_cloudflared_if_needed() {
	# Check cloudflared status
	if service cloudflared status | grep -q "running"; then
		logger "cloudflared service is already running, skipping start"
	else
		logger "***** Starting cloudflared service *****"
		/etc/init.d/cloudflared start 2>/dev/null || logger "Error starting cloudflared"
	fi
}

# Stop cloudflared if necessary
stop_cloudflared_if_needed() {
	logger "***** Stopping cloudflared service *****"
	/etc/init.d/cloudflared stop 2>/dev/null || logger "Error stopping cloudflared"
}

# Check and update UCI settings
check_and_update() {
	local config_key=$1
	local target_value=$2
	local current_value
	current_value=$(uci get "$config_key" 2>/dev/null)

	if [ "$current_value" != "$target_value" ]; then
		logger "Updating $config_key from $current_value to $target_value"
		uci set "$config_key"="$target_value"
		uci commit "${config_key%%.*}" 2>/dev/null || logger "Error committing config"
    	else
		logger "$config_key is already set to $target_value, skipping"
	fi
}

# Function to Enable natmap
enable_natmap() {
	if [ "$natmap_installed" = true ]; then
		check_and_update "natmap.@global[0].enable" "1"
		start_natmap_if_needed "$ACTION"
	fi
}

# Function to Disable natmap
disable_natmap() {
	if [ "$natmap_installed" = true ]; then
		check_and_update "natmap.@global[0].enable" "0"
		stop_natmap_if_needed "$ACTION"
	fi
}

# Function to Enable cloudflared
enable_cloudflared() {
	if [ "$cloudflared_installed" = true ]; then
		check_and_update "cloudflared.config.enabled" "1"
		start_cloudflared_if_needed "$ACTION"
	fi
}

# Function to Disable cloudflared
disable_cloudflared() {
	if [ "$cloudflared_installed" = true ]; then
		check_and_update "cloudflared.config.enabled" "0"
		stop_cloudflared_if_needed "$ACTION"
	fi
}

# Function to enable DHCPv4 add DHCP option
enable_dhcpv4_add_option() {
	uci batch <<-EOF
		set dhcp.lan.ignore=0
		add_list dhcp.lan.dhcp_option='3,192.88.9.1'
		add_list dhcp.lan.dhcp_option='6,192.88.9.1'
		commit dhcp
	EOF
	logger "*** Enable DHCPv4 and DHCP option ***"
}

# Function to add DHCP RA flags
add_dhcpv6_ra_flags() {
	uci batch <<-EOF
		add_list dhcp.lan.ra_flags=managed-config
		add_list dhcp.lan.ra_flags=other-config
		add_list dhcp.lan.ra_flags=home-agent
		commit dhcp
	EOF
	logger "*** Setting DHCP RA flags ***"
}

# Function to disable DHCPv4 and clear option
disable_dhcpv4_clear_option() {
	uci batch <<-EOF
		set dhcp.lan.ignore=0
		del_list dhcp.lan.dhcp_option='3,192.88.9.1'
		del_list dhcp.lan.dhcp_option='6,192.88.9.1'
		commit dhcp
	EOF
	logger "*** Cleared DHCP option ***"
}

# Function to clear DHCP RA flags
clear_dhcpv6_ra_flags() {
	uci batch <<-EOF
		del_list dhcp.lan.ra_flags=managed-config
		del_list dhcp.lan.ra_flags=other-config
		del_list dhcp.lan.ra_flags=home-agent
		commit dhcp
	EOF
	logger "*** Cleared DHCP RA flags ***"
}

# Restart dnsmasq if necessary
restart_dnsmasq_if_needed() {
	logger "Restarting dnsmasq service"
	/etc/init.d/dnsmasq restart 2>/dev/null || logger "Error restarting dnsmasq"
}

# Restart odhcpd if necessary
restart_odhcpd_if_needed() {
	logger "Restarting odhcpd service"
	/etc/init.d/odhcpd restart 2>/dev/null || logger "Error restarting odhcpd"
}

# Check if keepalived is shutting down
if [ "$ACTION" = "shutdown" ]; then
	disable_dhcpv4_clear_option "$ACTION"
	clear_dhcpv6_ra_flags "$ACTION"
	disable_cloudflared "$ACTION"
	disable_natmap "$ACTION"
	logger "*** Keepalived is shutting down, removing state files ***"
	rm -f /tmp/keepalived_initial_start
	exit 0
fi

# Check if keepalived is starting up
if [ "$ACTION" = "startup" ]; then
	logger "Keepalived is starting, marking initial start"
	touch /tmp/keepalived_initial_start
	exit 0
fi

# Only handle GROUP events to avoid duplicate triggers
if [ "$TYPE" != "GROUP" ]; then
	exit 0
fi

if [ "$TYPE" = "GROUP" ]; then
	case "$ACTION" in
		NOTIFY_MASTER)
			echo "MASTER" > /tmp/keepalived_state
			;;
		NOTIFY_BACKUP)
			echo "BACKUP" > /tmp/keepalived_state
			;;
	esac
fi

# Handle delayed execution for NOTIFY_BACKUP after startup
if [ -f /tmp/keepalived_initial_start ] && [ "$ACTION" = "NOTIFY_BACKUP" ]; then
	logger "*** Detected initial NOTIFY_BACKUP after Keepalived start, delaying execution ***"
	sleep 5

	# Check final state
	CURRENT_STATE=$(cat /tmp/keepalived_state)
	rm -f /tmp/keepalived_initial_start

	if [ "$CURRENT_STATE" = "BACKUP" ]; then
		logger "*** After delay, Keepalived is still in BACKUP state, executing NOTIFY_BACKUP logic immediately ***"
		disable_natmap "$ACTION"
		enable_cloudflared "$ACTION"
		disable_dhcpv4_clear_option "$ACTION"
		restart_dnsmasq_if_needed "$ACTION"
		check_and_update "dhcp.lan.dhcpv6" "disabled"
		check_and_update "dhcp.lan.ra" "disabled"
		clear_dhcpv6_ra_flags "$ACTION"
		restart_odhcpd_if_needed
		sync_leases_if_needed "$ACTION"
		schedule_sync_leases "$ACTION"
	else
		logger "*** After delay, Keepalived is no longer in BACKUP state, skipping NOTIFY_BACKUP execution ***"
		exit 0
	fi
fi

# Sync leases on backup router
sync_leases_if_needed() {
	if [ "$1" = "NOTIFY_BACKUP" ]; then
		logger "Executing sync_leases.sh for DHCP lease sync in BACKUP state"
		/usr/share/keepalived/scripts/sync_leases.sh &
	fi
}

# Schedule sync dhcp.leases
schedule_sync_leases() {
	if [ "$1" = "NOTIFY_BACKUP" ]; then
		if ! crontab -l 2>/dev/null | grep -q 'sync_leases.sh'; then
			logger "Scheduling periodic DHCP lease sync"
			(crontab -l 2>/dev/null; echo "*/2 * * * * /usr/share/keepalived/scripts/sync_leases.sh") | crontab - 2>/dev/null || logger "Error setting cron job"
		else
			logger "DHCP lease sync cron job already exists, skipping"
		fi
	elif [ "$1" = "NOTIFY_MASTER" ] || [ "$1" = "NOTIFY_FAULT" ]; then
		if crontab -l 2>/dev/null | grep -q 'sync_leases.sh'; then
			logger "Removing DHCP lease sync cron job"
			(crontab -l 2>/dev/null | grep -v 'sync_leases.sh') | crontab - 2>/dev/null || logger "Error removing cron job"
		else
			logger "No DHCP lease sync cron job found, skipping removal"
		fi
	fi
}

# Process Keepalived state directly from the ACTION
if [ "$ACTION" = "NOTIFY_MASTER" ]; then
	logger "Keepalived state is MASTER, enabling services"

	# Enable DHCPv4
	enable_dhcpv4_add_option "$ACTION"
	restart_dnsmasq_if_needed

	# Enable DHCPv6
	check_and_update "dhcp.lan.dhcpv6" "server"
	check_and_update "dhcp.lan.ra" "server"
#	check_and_update "dhcp.lan.ndp" "relay"

	add_dhcpv6_ra_flags "$ACTION"
	restart_odhcpd_if_needed

	# Skip sync_leases.sh
	logger "Skipping sync_leases.sh due to MASTER state"

	# Delete schedule
	schedule_sync_leases "$ACTION"

	# Disable cloudflared
	disable_cloudflared "$ACTION"

	# Enable natmap
	enable_natmap "$ACTION"

elif [ "$ACTION" = "NOTIFY_FAULT" ]; then
	logger "Keepalived state is FAULT, disabling services"

	# Disable natmap
	disable_natmap "$ACTION"

	# Disable cloudflared
	disable_cloudflared "$ACTION"

	# Disable DHCPv6
#	check_and_update "dhcp.lan.dhcpv6" "disabled"
#	check_and_update "dhcp.lan.ra" "disabled"
#	check_and_update "dhcp.lan.ndp" "disabled"

#	clear_dhcpv6_ra_flags "$ACTION"
#	restart_odhcpd_if_needed

	# Remove schedule
	schedule_sync_leases "$ACTION"
fi
